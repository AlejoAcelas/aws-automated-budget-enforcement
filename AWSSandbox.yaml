---
AWSTemplateFormatVersion: 2010-09-09

Description: This template creates a sandbox user which loses editing permissions when a monthly AWS budget is reached. Optionally, reaching the budget kills all resources to avoid increasing the bill. It creates a Budget, SandboxDeveloper role, and Lambda functions. **WARNING** You will be billed for the AWS resources created from this template.

Metadata:
  #Organize how the parameters appear in the AWS console
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: 'User settings'
        Parameters:
          - SandboxUserName
          - FirstTimeUserPassword
      - Label:
          default: 'Budget settings'
        Parameters:
          - Currency
          - BudgetLimit
          - KillAllResources
          - StartTime
          - ThresholdForWarning1
          - ThresholdForWarning2
          - ThresholdForLockingSandbox
      - Label:
          default: 'IAM roles and policies'
        Parameters:
          - LambdaRoleName
      - Label:
          default: 'Lambda function names'
        Parameters:
          - LockdownSandboxFunctionName
          - RestoreSandboxFunctionName
      - Label:
          default: 'SNS topics'
        Parameters:
          - SNSBudgetWarningTopicName
          - SNSBudgetExceededTopicName

Parameters:
  #Budget settings
  Currency:
    Description: Currency used for your Budget
    Type: String
    Default: USD
  BudgetLimit:
    Description: Monthly budget limit
    Type: Number
    Default: 100
  KillAllResources:
    Description: Set to true to kill all resources when the budget is exceeded
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  FirstTimeUserPassword:
    Description: The first-time password for the sandbox developer user. This password is required to be changed upon first login
    Type: String
    NoEcho: true
  StartTime:
    Description: The date the budget starts
    Type: Number
    Default: 1667275200 #November 1st 2022
  ThresholdForWarning1:
    Description: Budget % threshold for first warning notification - value is whole number with no % sign
    Type: Number
    Default: 50
  ThresholdForWarning2:
    Description: Budget % threshold for second warning notification - value is whole number with no % sign
    Type: Number
    Default: 80
  ThresholdForLockingSandbox:
    Description: Budget threshold for locking out users and resetting sandbox account
    Type: Number
    Default: 100

  #IAM roles and policies
  SandboxUserName:
    Description: Name for the sandbox developer role
    Type: String
    Default: SandboxDeveloper
  LambdaRoleName:
    Description: Name for the role the Lambda functions assume
    Type: String
    Default: SandboxControlLambdaRole
    
  #Lambdas
  LockdownSandboxFunctionName:
    Description: Name for the Lambda function invoked when the monthly budget is met
    Type: String
    Default: LockdownSandbox
  RestoreSandboxFunctionName:
    Description: Name for the Lambda function invoked when the sandbox access is restored at the beginning of each month
    Type: String
    Default: RestoreSandbox

  #SNS topics
  SNSBudgetWarningTopicName:
    Description: Name of SNS topic to create for notifications
    Type: String
    Default: SandboxBudgetWarning
  SNSBudgetExceededTopicName:
    Description: Name of SNS topic to create for notifications
    Type: String
    Default: SandboxBudgetExceeded

Resources:
#Create the SandboxDeveloperUser
  SandboxDeveloperUser: 
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Sub SandboxUserName
      LoginProfile:
        Password: !Ref FirstTimeUserPassword   
        PasswordResetRequired: true
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/PowerUserAccess' #Attach managed policy to user
        
#Create SandboxPowerUserRestrictions IAM policy
  SandboxPowerUserRestrictionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub SandboxPowerUserRestrictions-${AWS::Region} #Add Region to policy name to avoid issues when deploying stack to multiple AWS Regions
      PolicyDocument: #Remove permissions from PowerUserAccess that you do not want, including the ability to modify Budgets and the Lambda functions that govern SandboxDeveloper access
        Version: "2012-10-17"
        Statement:
            - Sid: RestrictBudgetsAccess
              Effect: Deny
              Action:
                - 'budgets:CreateBudgetAction'
                - 'budgets:DeleteBudgetAction'
                - 'budgets:ExecuteBudgetAction'
                - 'budgets:ModifyBudget'
                - 'budgets:UpdateBudgetAction'
              Resource: '*'
            - Sid: RestrictAccessToSandboxLambdas
              Effect: Deny
              Action:
                - 'lambda:*'
              Resource: 
                - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${LockdownSandboxFunctionName}'
                - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${RestoreSandboxFunctionName}'
      Users:
        - !Ref SandboxDeveloperUser

  #create SNS topic for budget warning notification
  SNSBudgetWarning:
    Type: AWS::SNS::Topic
    Properties:
     TopicName: !Sub ${SNSBudgetWarningTopicName}
     DisplayName: !Sub ${SNSBudgetWarningTopicName}

  #create SNS topic policy for budget warning notification
  SNSBudgetWarningPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: !Sub ${SNSBudgetWarningTopicName}Policy
        Version: "2012-10-17"
        Statement:
          - Sid: !Sub ${SNSBudgetWarningTopicName}BudgetsNotification
            Effect: Allow
            Principal:
              Service: 'budgets.amazonaws.com'
            Action: 'SNS:Publish'
            Resource: !Ref SNSBudgetWarning
            Condition:
                StringEquals: 
                    'aws:SourceAccount': !Sub ${AWS::AccountId}
                ArnLike:
                    'aws:SourceArn': !Sub 'arn:${AWS::Partition}:budgets::${AWS::AccountId}:*'
      Topics:
        - !Ref SNSBudgetWarning

  #create SNS topic for budget exceeded notification that will trigger the account lockdown
  SNSBudgetExceeded:
    Type: AWS::SNS::Topic
    Properties:
     TopicName: !Sub ${SNSBudgetExceededTopicName}
     DisplayName: !Sub ${SNSBudgetExceededTopicName}
     Subscription:
      - Endpoint:
          !GetAtt LockdownSandboxLambda.Arn
        Protocol: lambda

  SNSTarget:
    Type: AWS::SNS::TopicSubscription
    Properties: 
      TopicArn: !Ref SNSBudgetExceeded
      Protocol: lambda
      Endpoint: !GetAtt NukeStepFunction.Arn

  NukeStepFunction:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: nuke-account-cleanser-codebuild-state-machine
      RoleArn: !GetAtt 'NukeStepFunctionRole.Arn'
      DefinitionSubstitutions: 
      InputPayload: 
        nuke_dry_run: "${AWSNukeDryRunFlag}"
        nuke_version: "${AWSNukeVersion}" 
        region_list: 
          - us-east-1
          - us-west-1
      DefinitionString:
        Fn::Sub: |-
          {
            "Comment": "AWS Nuke Account Cleanser for multi-region single account clean up using SFN Map state parallel invocation of CodeBuild project.",
            "StartAt": "StartNukeCodeBuildForEachRegion",
            "States": {
              "StartNukeCodeBuildForEachRegion": {
                "Type": "Map",
                "ItemsPath": "$.InputPayLoad.region_list",
                "Parameters": {
                  "region_id.$": "$$.Map.Item.Value",
                  "nuke_dry_run.$": "$.InputPayLoad.nuke_dry_run",
                  "nuke_version.$": "$.InputPayLoad.nuke_version"
                },
                "Next": "Clean Output and Notify",
                "MaxConcurrency": 0,
                "Iterator": {
                  "StartAt": "Trigger Nuke CodeBuild Job",
                  "States": {
                    "Trigger Nuke CodeBuild Job": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                      "Parameters": {
                        "ProjectName": "${NukeCodeBuildProject.Arn}",
                        "EnvironmentVariablesOverride": [
                          {
                            "Name": "NukeTargetRegion",
                            "Type": "PLAINTEXT",
                            "Value.$": "$.region_id"
                          },
                          {
                            "Name": "AWS_NukeDryRun",
                            "Type": "PLAINTEXT",
                            "Value.$": "$.nuke_dry_run"
                          },
                          {
                            "Name": "AWS_NukeVersion",
                            "Type": "PLAINTEXT",
                            "Value.$": "$.nuke_version"
                          }
                        ]
                      },
                      "Next": "Check Nuke CodeBuild Job Status",
                      "ResultSelector": {
                        "NukeBuildOutput.$": "$.Build"
                      },
                      "ResultPath": "$.AccountCleanserRegionOutput",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.TaskFailed"
                          ],
                          "BackoffRate": 1,
                          "IntervalSeconds": 1,
                          "MaxAttempts": 1
                        }
                      ],
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "Next": "Nuke Failed",
                          "ResultPath": "$.AccountCleanserRegionOutput"
                        }
                      ]
                    },
                    "Check Nuke CodeBuild Job Status": {
                      "Type": "Choice",
                      "Choices": [
                        {
                          "Variable": "$.AccountCleanserRegionOutput.NukeBuildOutput.BuildStatus",
                          "StringEquals": "SUCCEEDED",
                          "Next": "Nuke Success"
                        },
                        {
                          "Variable": "$.AccountCleanserRegionOutput.NukeBuildOutput.BuildStatus",
                          "StringEquals": "FAILED",
                          "Next": "Nuke Failed"
                        }
                      ],
                      "Default": "Nuke Success"
                    },
                    "Nuke Success": {
                      "Type": "Pass",
                      "Parameters": {
                        "Status": "Succeeded",
                        "Region.$": "$.region_id",
                        "CodeBuild Status.$": "$.AccountCleanserRegionOutput.NukeBuildOutput.BuildStatus"
                      },
                      "ResultPath": "$.result",
                      "End": true
                    },
                    "Nuke Failed": {
                      "Type": "Pass",
                      "Parameters": {
                        "Status": "Failed",
                        "Region.$": "$.region_id",
                        "CodeBuild Status.$": "States.Format('Nuke Account Cleanser failed with error {}. Check CodeBuild execution for input region {} to investigate', $.AccountCleanserRegionOutput.Error, $.region_id)"
                      },
                      "ResultPath": "$.result",
                      "End": true
                    }
                  }
                },
                "ResultSelector": {
                  "filteredResult.$": "$..result"
                },
                "ResultPath": "$.NukeFinalMapAllRegionsOutput"
              },
              "Clean Output and Notify": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Subject": "State Machine for Nuke Account Cleanser completed",
                  "Message.$": "States.Format('Nuke Account Cleanser completed for input payload: \n {}. \n ----------------------------------------- \n Check the summmary of execution below: \n {}', $.InputPayLoad, $.NukeFinalMapAllRegionsOutput.filteredResult)",
                  "TopicArn": "${NukeEmailTopic}"
                },
                "End": true
              }
            }
          }
      Tags:
        - Key: DoNotNuke
          Value: 'True'
        - Key: owner
          Value: !Ref Owner


  #policy for the budget exceeded SNS topic
  SNSBudgetExceededPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: !Sub ${SNSBudgetExceededTopicName}Policy
        Version: "2012-10-17"
        Statement:
          - Sid: !Sub ${SNSBudgetExceededTopicName}BudgetsNotification
            Effect: Allow
            Principal:
              Service: 'budgets.amazonaws.com'
            Action: 'SNS:Publish'
            Resource: !Ref SNSBudgetExceeded
            Condition:
                StringEquals: 
                    'aws:SourceAccount': !Sub ${AWS::AccountId}
                ArnLike:
                    'aws:SourceArn': !Sub 'arn:${AWS::Partition}:budgets::${AWS::AccountId}:*'
      Topics:
        - !Ref SNSBudgetExceeded

  #create the budget in AWS budgets with you desired monthly limit and alerting thresholds
  SandboxBudget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetLimit:
          Amount: !Sub ${BudgetLimit}
          Unit: !Sub ${Currency}
        TimeUnit: MONTHLY
        TimePeriod:
          Start: !Sub ${StartTime}
        BudgetType: COST
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: !Sub ${ThresholdForWarning1}
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref SNSBudgetWarning
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: !Sub ${ThresholdForWarning2}
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref SNSBudgetWarning
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: !Sub ${ThresholdForLockingSandbox}
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref SNSBudgetExceeded
    DependsOn:
      - SNSBudgetWarningPolicy
      - SNSBudgetExceededPolicy

  #Create log groups for the Lambda functions
  LockdownSandboxLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        LogGroupName: !Sub '/aws/lambda/${LockdownSandboxFunctionName}'
        RetentionInDays: 7
  
  RestoreSandboxLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        LogGroupName: !Sub '/aws/lambda/${RestoreSandboxFunctionName}'
        RetentionInDays: 7

  #Create role for the sandbox lambdas to run as
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      RoleName: !Sub ${LambdaRoleName}
      Policies:
        - PolicyName: LambdaRolePolicyMgmt
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:DetachUserPolicy'
                  - 'iam:AttachUserPolicy'
                Resource: !GetAtt SandboxDeveloperUser.Arn
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'
        - PolicyName: SandboxLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !GetAtt LockdownSandboxLogGroup.Arn
                  - !GetAtt RestoreSandboxLogGroup.Arn

  #Create the lambda that runs when the budget is exceeded
  LockdownSandboxLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LockdownSandboxFunctionName
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          import json
          import boto3

          def lambda_handler(event, context):

                #Create IAM client
                iam = boto3.client('iam')
                
                #Detach PowerUserAccess policy from SandboxDeveloper user
                iam.detach_user_policy(
                UserName=!Sub ${SandboxUserName}
                PolicyArn='arn:${AWS::Partition}:iam::aws:policy/PowerUserAccess',
                )
                
                #Detach SandboxPowerUserRestrictions policy from SandboxDeveloper user
                iam.detach_user_policy(
                UserName=!Sub ${SandboxUserName}
                PolicyArn='arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/SandboxPowerUserRestrictions-${AWS::Region}',
                )

                #Attach ReadOnlyAccess SandboxDeveloper user
                iam.attach_user_policy(
                UserName=!Sub ${SandboxUserName}
                PolicyArn='arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess',
                )
                
                #Return success message, if there is an error that will be automatically returned
                return {
                    'statusCode': 200,
                    'body': json.dumps('SandboxDeveloper user access set to read only')
                }

  #Give the SNS topic permissions to invoke the lambda
  PermissionToInvokeLockdownLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LockdownSandboxLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'sns.amazonaws.com'
      SourceArn: !Ref SNSBudgetExceeded

  #Create lambda to restore sandbox access
  RestoreSandboxLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref RestoreSandboxFunctionName
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          import json
          import boto3

          def lambda_handler(event, context):

                #Create IAM client
                iam = boto3.client('iam')
                
                #Detach the Sandbox role lockdown policy from SandboxDeveloper role
                iam.detach_user_policy(
                UserName=!Sub {SandboxUserName}
                PolicyArn='arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess',
                )

                #Attach PowerUserAccess policy to SandboxDeveloper role
                iam.attach_role_policy(
                UserName=!Sub {SandboxUserName}
                PolicyArn='arn:${AWS::Partition}:iam::aws:policy/PowerUserAccess',
                )
                
                #Attach SandboxPowerUserRestrictions policy to SandboxDeveloper role
                iam.attach_role_policy(
                UserName=!Sub {SandboxUserName}
                PolicyArn='arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/SandboxPowerUserRestrictions-${AWS::Region}',
                )
                
                #Return success message, if there is an error that will be automatically returned
                return {
                    'statusCode': 200,
                    'body': json.dumps('SandboxDeveloper user access restored')
                }


  #Creae schedule to restore sandbox access
  ScheduleToRestoreAccess:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule in EventBridge to invoke the RestoreSandbox Lambda function at the beginning of each month
      ScheduleExpression: cron(0 5 1 * ? *) #This is set for 5 UTC which is 12:00AM EST, during DST it will run at 1:00AM
      State: ENABLED
      Targets:
        - Arn: !GetAtt RestoreSandboxLambda.Arn
          Id: RestoreSandboxLambda

  #Permission for schedule to invoke lambda
  PermissionForEventToInvokeRestoreLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RestoreSandboxLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn:
        !GetAtt ScheduleToRestoreAccess.Arn

Outputs:
  BudgetId:
    Description: The monthly budget for your account created in AWS Budgets
    Value: !Ref SandboxBudget
  LockdownSandboxLambdaFunction:
    Description: ARN for the LockdownSandbox function
    Value: !GetAtt LockdownSandboxLambda.Arn
  RestoreSandboxLambdaFunction:
    Description: ARN for the RestoreSandbox function
    Value: !GetAtt RestoreSandboxLambda.Arn
  BudgetWarningSNSTopic:
    Description: ARN for the Budget Warning SNS topic
    Value: !Ref SNSBudgetWarning
  BudgetExceededSNSTopic:
    Description: ARN for the Budget Exceeded SNS topic
    Value: !Ref SNSBudgetExceeded
  SandboxVPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]